Purpose of this document
------------------------
This document lists the steps needed to make a project release.


Before the release
------------------
- if necessary, update the TODO file
- update the ChangeLog file (should have been done continuously, anyway)
- update the "Release notes" section in the README file with a collection of
  the most important entries from the ChangeLog file and/or the git log
- change the release date in the following files:
  - Roadmap
- make sure that the version number is up to date in the following files
  (it should have been bumped already after the last release was made):
  - README
  - setup.py
- make sure that the copyright year is up to date in the following files:
  - *.c, *.h and *.py files in the src folder
  - setup.py
- run build and automated tests on development system, both for Python 2.x
  and Python 3.x; do this either in the IDE or on the command line; if you are
  on a Mac OS X or Debian Linux box, the following helper script does all this
  automatically for you:
    ./build-and-test.sh
- make the source distribution tar ball by issuing the following commands (check
  the command's output for suspicious warnings, although you can ignore warnings
  about missing README, .DS_Store and *.pyc files):
    cd <projectdir>
    ./setup.py sdist
- take the source distribution tar ball to another system, run build and
  automated tests on that system, and simulate an install; again,
  build-and-test.sh is your friend on Mac OS X and Debian Linux;
    tar xfvzo python-aprmd5-x.y.tar.gz
    cd python-aprmd5-x.y
    --- manually edit setup.py so that the project builds ---
    ./build-and-test.sh
    cd ..
    rm -r python-aprmd5-x.y
- commit final changes (check with "git status" that nothing was forgotten)


Make the release
----------------
- tag and sign the release
  cd <projectdir>
  git tag -s -m "tagging release x.y" x.y <commit hash>
- update the blessed repository
  cd <projectdir>
  git push
  git push --tags
- make source distribution tar ball available on the project website
- add the new version number to the bug tracker so that issues can be reported
  once the release has been made public
- update the website to announce the new release
- push release to PyPi
  /Library/Frameworks/Python.framework/Versions/3.1/bin/python3.1 setup.py register


After the release
-----------------
- cleanup
  cd <projectdir>
  rm MANIFEST
  rm -r build dist src/packages/aprmd5.so
- bump the version number to the next planned release; check above under
  "Before the release" which files are affected
