Purpose of this document
------------------------
This document is a simple container for some notes related to my experiences
with developing my first Python extension.


The mythical "Setup file"
-------------------------
In the official Python docs, the document "Installing Python Modules" contains
a section titled "Tweaking compiler/linker flags" which talks about a so-called
"Setup file". This file supposedly allows to list extension modules to be built,
including any extra compiler and linker flags.

Nowhere in the docs does it specify how this file actually should be named, nor
how it is to be incorporated into the module build done by setup.py. Looking at
the markup of the document, one might get the vague notion that the file should
be called "Setup", but this is not true.

Googling does not really help. Digging in the distutils sources finally reveals
a function read_setup_file() inside the file extension.py that is intended to
handle this mythical "Setup file". Another search for invocations of that
function reveals - nothing! The only place that the function is called from is
a unit test inside distutils.

Googling for read_setup_file() again does not help much. Issue 6145 (May 2009,
http://bugs.python.org/issue6145) talks about the function, but says nothing
about how it is used (ironically, the developer whom the issue is assigned to
states that he needs to "look at how read_setup_file is actually used in the
community [...]". Finally, on some obscure project page on the web, I found a
usage example for the function - it appears that one must call the function
*manually* from within setup.py:

  extensions = read_setup_file('Setup')

Aha. Why didn't the Python docs say so? A pity, because the docs are otherwise
pretty good and not as obfuscated and lacking as in this case.

Having finally found out how this is supposed to work, and looking at how the
read_setup_file() function is implemented, I must say that this is probably not
the most terrific feature of the distutils package. Everything that the function
does can also be accomplished from within setup.py, when creating an instance of
distutils.Extension(). IMHO the only advantage of this "Setup file" is when you
are *really* desperate to keep compiler/linker flags out of setup.py.


pydoc strings
-------------
To view the extension's documentation, issue this command:

  PYTHONPATH=src/packages pydoc aprmd5

Looking at the source code of other Python extensions hints at a method to
provide additional pydoc strings using what is probably a preprocessor macro.
For instance, in md5module.c of the Python 3.1 source tree the following
line can be found:

  PyDoc_STRVAR(MD5_copy__doc__, "Return a copy of the hash object.");

Unfortunately, I was never able to see any string that I added to my own
extension in a similar manner, so for the moment I abandoned the effort.


Build into a non-standard location
----------------------------------
A standard build (./setup.py build_ext) of python-aprmd5 places the resulting
shared library file somewhere below the folder "build", in a directory whose
name depends on the target platform. This can be annoying because the name is
not easy to remember, or it is changing from one platform to the next.

There are a few interesting build variants, though, that allow to specify a
folder where the built extensions should be placed. The advantage of this is
that the folder name is known and constant. The drawback is that the install
(./setup.py install) does not work from such a customized location.

To build into the base directory where setup.py is located, run this command:

  ./setup.py build_ext --inplace

This is useful because now you don't have to specify a PYTHONPATH to run unit
tests. Just say "./setup.py test" and you're done.

To build into an arbitrary directory, run this command:

  ./setup.py build_ext --build-lib=src/packages

This example places the built extension into the "src/packages" folder.
